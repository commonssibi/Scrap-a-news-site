#!/usr/bin/env python

'''
Author: Prasanna Venkadesh, Sibi Kanakaraj
License: GNU GPL
'''

import os
import urllib
import datetime
from bs4 import BeautifulSoup
from urlparse import urlparse, parse_qs

class dinakaran_Parser:
    
    def __init__(self, base_url):
        self.base_url = base_url
        self.published_date = None
        self.data = {}

    def parse(self, news_id):
        
        full_url = self.base_url + str(news_id)
        
        # Hit the URL and fetch the HTML content
        print("Hitting the Url...")
        response = urllib.urlopen(full_url)
        
        if response.code == 200:
        
            # Find sections using BeautifulSoup
            soup = BeautifulSoup(response)
            news_content = ''.join(text.strip() for text in soup.p.find_all(text=True, recursive=False)).encode('utf8')
            self.data['news_content'] = news_content
            return self.data
            
        else:
            return None
        

if __name__ == "__main__":

    # setup the parser configs
    dinakaran_url = "http://www.dinakaran.com/News_Detail.asp?Nid="
    dinakaran_parser = dinakaran_Parser(dinakaran_url)
    
    # Destination to save the output of the parser
    output_folder = os.getenv('PWD') + "/Dinakaran_data/"
    
    # Check if the folder already exists. If not create one.
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
        
    news_id_start = int(raw_input("Enter a News ID to start with: "))
    no_of_news = int(raw_input("How many news to parse? "))
    
    try:
        with open(output_folder + 'Dinakaran.txt', 'w') as outfile:
            for news_id in range(news_id_start, news_id_start + no_of_news):
                json_data = dinakaran_parser.parse(news_id)
                if json_data is not None:
                    outfile.write(json_data.get('news_content'))
                    outfile.write("\n" + ("-" * 20) + "\n")
                else:
                    print ("Unable to parse, Skipping News ID: %d" % news_id)
    except BaseException, be:
        print ("Exception Occured, Message: s", be)
        pass
        
    finally:
        print ("Finished. Output files are saved in %s" % output_folder)
